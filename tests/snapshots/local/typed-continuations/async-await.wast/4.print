(module $queue
  (type $func (;0;) (func))
  (type $cont (;1;) (cont $func))
  (type (;2;) (func (result i32)))
  (type (;3;) (func (result (ref null 1))))
  (type (;4;) (func (param (ref null 1))))
  (func $queue-empty (;0;) (type 2) (result i32)
    global.get $qfront
    global.get $qback
    i32.eq
  )
  (func $dequeue (;1;) (type 3) (result (ref null 1))
    (local $i i32)
    call $queue-empty
    if ;; label = @1
      ref.null 1
      return
    end
    global.get $qfront
    local.set $i
    local.get $i
    i32.const 1
    i32.add
    global.set $qfront
    local.get $i
    table.get $queue
  )
  (func $enqueue (;2;) (type 4) (param $k (ref null 1))
    global.get $qback
    table.size $queue
    i32.eq
    if ;; label = @1
      global.get $qfront
      global.get $qdelta
      i32.lt_u
      if ;; label = @2
        ref.null 1
        global.get $qdelta
        table.grow $queue
        drop
      else
        global.get $qback
        global.get $qfront
        i32.sub
        global.set $qback
        i32.const 0
        global.get $qfront
        global.get $qback
        table.copy
        global.get $qback
        ref.null 1
        global.get $qfront
        table.fill $queue
        i32.const 0
        global.set $qfront
      end
    end
    global.get $qback
    local.get $k
    table.set $queue
    global.get $qback
    i32.const 1
    i32.add
    global.set $qback
  )
  (table $queue (;0;) 0 (ref null 1))
  (global $qdelta (;0;) i32 i32.const 10)
  (global $qback (;1;) (mut i32) i32.const 0)
  (global $qfront (;2;) (mut i32) i32.const 0)
  (export "queue-empty" (func $queue-empty))
  (export "dequeue" (func $dequeue))
  (export "enqueue" (func $enqueue))
)
