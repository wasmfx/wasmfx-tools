(module
  (type $f0 (;0;) (func (result i32 i32 i32 i32 i32 i32 i32)))
  (type $f2 (;1;) (func (param i32 i32) (result i32 i32 i32 i32 i32 i32 i32)))
  (type $f4 (;2;) (func (param i32 i32 i32 i32) (result i32 i32 i32 i32 i32 i32 i32)))
  (type $f6 (;3;) (func (param i32 i32 i32 i32 i32 i32) (result i32 i32 i32 i32 i32 i32 i32)))
  (type $k0 (;4;) (cont $f0))
  (type $k2 (;5;) (cont $f2))
  (type $k4 (;6;) (cont $f4))
  (type $k6 (;7;) (cont $f6))
  (type (;8;) (func (result i32 i32 i32 i32 i32 i32)))
  (func $f (;0;) (type $f0) (result i32 i32 i32 i32 i32 i32 i32)
    i32.const 0
    suspend $e
  )
  (func (;1;) (type $f0) (result i32 i32 i32 i32 i32 i32 i32)
    (local $k6 (ref null 7)) (local $k4 (ref null 6)) (local $k2 (ref null 5))
    block $l (result (ref 7))
      ref.func $f
      cont.new $k0
      resume $k0 (tag $e $l)
      unreachable
    end
    local.set $k6
    i32.const 1
    i32.const 2
    local.get $k6
    cont.bind $k6 $k4
    local.set $k4
    i32.const 3
    i32.const 4
    local.get $k4
    cont.bind $k4 $k2
    local.set $k2
    i32.const 5
    i32.const 6
    local.get $k2
    resume $k2
  )
  (tag $e (;0;) (type 8) (result i32 i32 i32 i32 i32 i32))
  (export "run" (func 1))
  (elem (;0;) declare func $f)
)
