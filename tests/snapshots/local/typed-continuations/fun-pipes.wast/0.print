(module $pipes
  (type $pfun (;0;) (func (result i32)))
  (type $cfun (;1;) (func (param i32) (result i32)))
  (type $producer (;2;) (cont $pfun))
  (type $consumer (;3;) (cont $cfun))
  (type (;4;) (func (param i32)))
  (type (;5;) (func (param i32 (ref $producer) (ref $consumer))))
  (type (;6;) (func (param (ref $consumer) (ref $producer))))
  (type (;7;) (func (result i32 (ref $producer))))
  (type (;8;) (func (param (ref $producer) (ref $consumer))))
  (func $piper (;0;) (type 5) (param $n i32) (param $p (ref $producer)) (param $c (ref $consumer))
    block $on-receive (result (ref $consumer))
      local.get $n
      local.get $c
      resume $consumer (tag $receive $on-receive)
      return
    end
    local.set $c
    local.get $c
    local.get $p
    return_call $copiper
  )
  (func $copiper (;1;) (type 6) (param $c (ref $consumer)) (param $p (ref $producer))
    (local $n i32)
    block $on-send (type 7) (result i32 (ref $producer))
      local.get $p
      resume $producer (tag $send $on-send)
      return
    end
    local.set $p
    local.set $n
    local.get $n
    local.get $p
    local.get $c
    return_call $piper
  )
  (func $pipe (;2;) (type 8) (param $p (ref $producer)) (param $c (ref $consumer))
    i32.const -1
    local.get $p
    local.get $c
    call $piper
  )
  (tag $send (;0;) (type 4) (param i32))
  (tag $receive (;1;) (type $pfun) (result i32))
  (export "send" (tag 0))
  (export "receive" (tag 1))
  (export "pipe" (func $pipe))
)
